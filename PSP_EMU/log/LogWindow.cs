using System;

/*
 This file is part of pspsharp.

 pspsharp is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 pspsharp is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with pspsharp.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace pspsharp.log
{
	using Level = org.apache.log4j.Level;
	//using Logger = org.apache.log4j.Logger;
	using DOMConfigurator = org.apache.log4j.xml.DOMConfigurator;

	public class LogWindow : javax.swing.JFrame
	{

		private static string confFile = "LogSettings.xml";
		private readonly string[] loglevels = new string[] {"ALL", "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "OFF"};

		public LogWindow()
		{
			initComponents();

			TextPaneAppender textPaneAppender = (TextPaneAppender) Logger.RootLogger.getAppender("JpcspAppender");
			if (textPaneAppender != null)
			{
				textPaneAppender.TextPane = tpLog;
			}

			LogLevelFromConfig;

			WindowPropSaver.loadWindowProperties(this);
		}

		public static string ConfXMLFile
		{
			set
			{
				confFile = value;
			}
		}

		public virtual void clearScreenMessages()
		{
			lock (tpLog)
			{
				tpLog.Text = "";
			}
		}

		private void getLogLevelFromConfig()
		{
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'sealed override':
//ORIGINAL LINE: sealed override org.apache.log4j.Logger rootLogger = org.apache.log4j.Logger.getRootLogger();
			Logger rootLogger = Logger.RootLogger;
			Level lvlConfig = rootLogger.Level;

			if (lvlConfig.Equals(Level.ALL))
			{
				cmbLogLevel.SelectedIndex = 0;
			}
			if (lvlConfig.Equals(Level.TRACE))
			{
				cmbLogLevel.SelectedIndex = 1;
			}
			if (lvlConfig.Equals(Level.DEBUG))
			{
				cmbLogLevel.SelectedIndex = 2;
			}
			if (lvlConfig.Equals(Level.INFO))
			{
				cmbLogLevel.SelectedIndex = 3;
			}
			if (lvlConfig.Equals(Level.WARN))
			{
				cmbLogLevel.SelectedIndex = 4;
			}
			if (lvlConfig.Equals(Level.ERROR))
			{
				cmbLogLevel.SelectedIndex = 5;
			}
			if (lvlConfig.Equals(Level.FATAL))
			{
				cmbLogLevel.SelectedIndex = 6;
			}
			if (lvlConfig.Equals(Level.OFF))
			{
				cmbLogLevel.SelectedIndex = 7;
			}
		}

		public static void Main(string[] args)
		{
			try
			{
				UIManager.LookAndFeel = UIManager.SystemLookAndFeelClassName;
			}
			catch (Exception e)
			{
				System.Console.WriteLine(e.ToString());
				System.Console.Write(e.StackTrace);
			}
			System.setProperty("log4j.properties", confFile);
			DOMConfigurator.configure(confFile);

			System.Out = new PrintStream(new LoggingOutputStream(Logger.getLogger("sysout"), Level.INFO));
			(new LogWindow()).Visible = true;
		}

		/// <summary>
		/// This method is called from within the constructor to initialize the form.
		/// WARNING: Do NOT modify this code. The content of this method is always
		/// regenerated by the Form Editor.
		/// </summary>
//JAVA TO C# CONVERTER TODO TASK: Most Java annotations will not have direct .NET equivalent attributes:
//ORIGINAL LINE: @SuppressWarnings("unchecked") private void initComponents()
		private void initComponents()
		{

			scrollPane = new javax.swing.JScrollPane();
			lblLevel = new javax.swing.JLabel();
			cmbLogLevel = new javax.swing.JComboBox();
			btnClear = new javax.swing.JButton();

			DefaultCloseOperation = javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
			java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pspsharp/languages/pspsharp"); // NOI18N
			Title = bundle.getString("LogWindow.title"); // NOI18N
			MinimumSize = new java.awt.Dimension(400, 120);

			scrollPane.ViewportView = tpLog;

			lblLevel.Text = bundle.getString("LogWindow.lblLevel.text"); // NOI18N

			cmbLogLevel.Model = new DefaultComboBoxModel(loglevels);
			cmbLogLevel.addItemListener(new ItemListenerAnonymousInnerClass(this));

			btnClear.Text = bundle.getString("ClearButton.text"); // NOI18N
			btnClear.addActionListener(new ActionListenerAnonymousInnerClass(this));

			javax.swing.GroupLayout layout = new javax.swing.GroupLayout(ContentPane);
			ContentPane.Layout = layout;
			layout.HorizontalGroup = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(scrollPane).addGroup(layout.createSequentialGroup().addComponent(lblLevel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cmbLogLevel, 0, 309, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(btnClear))).addContainerGap());
			layout.VerticalGroup = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 145, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblLevel).addComponent(cmbLogLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(btnClear, javax.swing.GroupLayout.Alignment.TRAILING)).addContainerGap());

			pack();
		} // </editor-fold>//GEN-END:initComponents

		private class ItemListenerAnonymousInnerClass : java.awt.@event.ItemListener
		{
			private readonly LogWindow outerInstance;

			public ItemListenerAnonymousInnerClass(LogWindow outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void itemStateChanged(ItemEvent evt)
			{
				outerInstance.cmbLogLevelItemStateChanged(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass : java.awt.@event.ActionListener
		{
			private readonly LogWindow outerInstance;

			public ActionListenerAnonymousInnerClass(LogWindow outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.btnClearActionPerformed(evt);
			}
		}

		private void btnClearActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_btnClearActionPerformed
			clearScreenMessages();
		} //GEN-LAST:event_btnClearActionPerformed

		private void cmbLogLevelItemStateChanged(ItemEvent evt)
		{ //GEN-FIRST:event_cmbLogLevelItemStateChanged
//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'sealed override':
//ORIGINAL LINE: sealed override org.apache.log4j.Logger rootLogger = org.apache.log4j.Logger.getRootLogger();
			Logger rootLogger = Logger.RootLogger;
			if (evt.StateChange == ItemEvent.SELECTED)
			{
				if (evt.Item.Equals(loglevels[0]))
				{
					rootLogger.Level = Level.ALL;
				}
				if (evt.Item.Equals(loglevels[1]))
				{
					rootLogger.Level = Level.TRACE;
				}
				if (evt.Item.Equals(loglevels[2]))
				{
					rootLogger.Level = Level.DEBUG;
				}
				if (evt.Item.Equals(loglevels[3]))
				{
					rootLogger.Level = Level.INFO;
				}
				if (evt.Item.Equals(loglevels[4]))
				{
					rootLogger.Level = Level.WARN;
				}
				if (evt.Item.Equals(loglevels[5]))
				{
					rootLogger.Level = Level.ERROR;
				}
				if (evt.Item.Equals(loglevels[6]))
				{
					rootLogger.Level = Level.FATAL;
				}
				if (evt.Item.Equals(loglevels[7]))
				{
					rootLogger.Level = Level.OFF;
				}
			}
		} //GEN-LAST:event_cmbLogLevelItemStateChanged
		// Variables declaration - do not modify//GEN-BEGIN:variables
		private javax.swing.JButton btnClear;
		private javax.swing.JComboBox cmbLogLevel;
		private javax.swing.JLabel lblLevel;
		private javax.swing.JScrollPane scrollPane;
		private readonly javax.swing.JTextPane tpLog = new javax.swing.JTextPane();
		// End of variables declaration//GEN-END:variables
	}

}