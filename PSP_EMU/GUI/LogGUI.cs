/*
 This file is part of pspsharp.

 pspsharp is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 pspsharp is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with pspsharp.  If not, see <http://www.gnu.org/licenses/>.
 */
namespace pspsharp.GUI
{
	using LogWindow = pspsharp.log.LogWindow;
	using Settings = pspsharp.settings.Settings;

	using Constants = pspsharp.util.Constants;

	public class LogGUI : javax.swing.JFrame
	{

		private const long serialVersionUID = -732715495873159718L;
		private static readonly string LB = System.getProperty("line.separator");
		private MainGUI mainWindow = null;
		private string LogSettingsPath;

		public LogGUI(MainGUI main)
		{
			this.mainWindow = main;
			LocationRelativeTo = main;

			initComponents();
			setLogSettingsFile();
			RefreshWindow();

			WindowPropSaver.loadWindowProperties(this);
		}

		public virtual MainGUI MainGUI
		{
			set
			{
				this.mainWindow = value;
			}
		}

		private void setLogSettingsFile()
		{
			LogSettingsPath = xmlpath.Text;
			LogWindow.ConfXMLFile = LogSettingsPath;
			printLogSettingsFile();
		}

		private void printLogSettingsFile()
		{
			try
			{
				RandomAccessFile raf = new RandomAccessFile(LogSettingsPath, "r");
				while (raf.FilePointer < raf.Length())
				{
					settingsArea.append(raf.readLine() + LB);
				}
				raf.close();
			}
			catch (Exception)
			{
				settingsArea.setEnabled(false);
			}
		}

		/// <summary>
		/// This method is called from within the constructor to initialize the form.
		/// WARNING: Do NOT modify this code. The content of this method is always
		/// regenerated by the Form Editor.
		/// </summary>
		// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
		private void initComponents()
		{

			buttonGroup1 = new javax.swing.ButtonGroup();
			jButtonOK = new javax.swing.JButton();
			jTabbedPane1 = new javax.swing.JTabbedPane();
			LoggerGeneralPanel = new javax.swing.JPanel();
			openLogWindowCheck = new javax.swing.JCheckBox();
			snapSystem.ConsoleCheck = new javax.swing.JCheckBox();
			logKeywordField = new javax.swing.JTextField();
			logByKeywordCheck = new javax.swing.JCheckBox();
			LoggerSettingsPanel = new javax.swing.JPanel();
			jScrollPane1 = new javax.swing.JScrollPane();
			settingsArea = new javax.swing.JTextArea();
			fileButton = new javax.swing.JButton();
			xmlpath = new javax.swing.JTextField();
			lblSettingsPath = new javax.swing.JLabel();
			outputToHTML = new javax.swing.JCheckBox();
			outputToText = new javax.swing.JCheckBox();
			lblOutputFile = new javax.swing.JLabel();
			logoutpath = new javax.swing.JTextField();
			lblMaxFileSize = new javax.swing.JLabel();
			maxSizeSpinner = new javax.swing.JSpinner();
			splitFilesBox = new javax.swing.JCheckBox();
			LoggerAdvancedPanel = new javax.swing.JPanel();
			rbGeneralDebug = new javax.swing.JRadioButton();
			rbCPUDebug = new javax.swing.JRadioButton();
			rbGPUDebug = new javax.swing.JRadioButton();
			rbCoreDebug = new javax.swing.JRadioButton();
			rbFullDebug = new javax.swing.JRadioButton();
			rbCustom = new javax.swing.JRadioButton();
			lblLogMethod = new javax.swing.JLabel();
			interruptMgrBox = new javax.swing.JCheckBox();
			ioFileMgrBox = new javax.swing.JCheckBox();
			kernelLibBox = new javax.swing.JCheckBox();
			loadCoreBox = new javax.swing.JCheckBox();
			loadExecBox = new javax.swing.JCheckBox();
			moduleMgrBox = new javax.swing.JCheckBox();
			stdioBox = new javax.swing.JCheckBox();
			sysMemKernelBox = new javax.swing.JCheckBox();
			sysMemUserBox = new javax.swing.JCheckBox();
			threadManBox = new javax.swing.JCheckBox();
			utilsBox = new javax.swing.JCheckBox();
			atracBox = new javax.swing.JCheckBox();
			audioBox = new javax.swing.JCheckBox();
			ctrlBox = new javax.swing.JCheckBox();
			defltBox = new javax.swing.JCheckBox();
			displayBox = new javax.swing.JCheckBox();
			dmacBox = new javax.swing.JCheckBox();
			fontBox = new javax.swing.JCheckBox();
			geUserBox = new javax.swing.JCheckBox();
			hprmBox = new javax.swing.JCheckBox();
			imposeBox = new javax.swing.JCheckBox();
			mp3Box = new javax.swing.JCheckBox();
			mpegBox = new javax.swing.JCheckBox();
			powerBox = new javax.swing.JCheckBox();
			psmfBox = new javax.swing.JCheckBox();
			psmfPlayerBox = new javax.swing.JCheckBox();
			rtcBox = new javax.swing.JCheckBox();
			sasBox = new javax.swing.JCheckBox();
			suspendBox = new javax.swing.JCheckBox();
			umdBox = new javax.swing.JCheckBox();
			utilityBox = new javax.swing.JCheckBox();
			cpuBox = new javax.swing.JCheckBox();
			gpuBox = new javax.swing.JCheckBox();
			compilerBox = new javax.swing.JCheckBox();
			memBox = new javax.swing.JCheckBox();
			emuBox = new javax.swing.JCheckBox();
			jSeparator1 = new javax.swing.JSeparator();
			lblCustom = new javax.swing.JLabel();
			loaderBox = new javax.swing.JCheckBox();
			runtimeBox = new javax.swing.JCheckBox();
			stdoutBox = new javax.swing.JCheckBox();
			stderrBox = new javax.swing.JCheckBox();
			jSeparator2 = new javax.swing.JSeparator();
			saveButton = new javax.swing.JButton();
			jButtonCancel = new pspsharp.GUI.CancelButton();

			java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("pspsharp/languages/pspsharp"); // NOI18N
			Title = bundle.getString("LogGUI.title"); // NOI18N
			Resizable = false;

			jButtonOK.Text = bundle.getString("OkButton.text"); // NOI18N
			jButtonOK.addActionListener(new ActionListenerAnonymousInnerClass(this));

			openLogWindowCheck.Text = bundle.getString("LogGUI.openLogWindowCheck.text"); // NOI18N

			snapSystem.ConsoleCheck.Text = bundle.getString("LogGUI.snapSystem.ConsoleCheck.text"); // NOI18N

			logKeywordField.Editable = false;
			logKeywordField.Text = "LOG_ALL"; // NOI18N

			logByKeywordCheck.Text = bundle.getString("LogGUI.logByKeywordCheck.text"); // NOI18N
			logByKeywordCheck.addActionListener(new ActionListenerAnonymousInnerClass2(this));

			javax.swing.GroupLayout LoggerGeneralPanelLayout = new javax.swing.GroupLayout(LoggerGeneralPanel);
			LoggerGeneralPanel.Layout = LoggerGeneralPanelLayout;
			LoggerGeneralPanelLayout.HorizontalGroup = LoggerGeneralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerGeneralPanelLayout.createSequentialGroup().addContainerGap().addGroup(LoggerGeneralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerGeneralPanelLayout.createSequentialGroup().addComponent(logByKeywordCheck).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(logKeywordField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0, 306, short.MaxValue)).addComponent(openLogWindowCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(snapSystem.ConsoleCheck, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue)).addContainerGap());
			LoggerGeneralPanelLayout.VerticalGroup = LoggerGeneralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerGeneralPanelLayout.createSequentialGroup().addContainerGap().addComponent(openLogWindowCheck).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(snapSystem.ConsoleCheck).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerGeneralPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(logByKeywordCheck).addComponent(logKeywordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(248, short.MaxValue));

			jTabbedPane1.addTab(bundle.getString("LogGUI.LoggerGeneralPanel.TabConstraints.tabTitle"), LoggerGeneralPanel); // NOI18N

			settingsArea.setEditable(false);
			settingsArea.setColumns(20);
			settingsArea.setRows(5);
			jScrollPane1.ViewportView = settingsArea;

			fileButton.Text = "..."; // NOI18N
			fileButton.addActionListener(new ActionListenerAnonymousInnerClass3(this));

			xmlpath.Editable = false;
			xmlpath.Text = "LogSettings.xml"; // NOI18N

			lblSettingsPath.Text = bundle.getString("LogGUI.lblSettingsPath.text"); // NOI18N

			outputToHTML.Selected = true;
			outputToHTML.Text = bundle.getString("LogGUI.outputToHTML.text"); // NOI18N

			outputToText.Text = bundle.getString("LogGUI.outputToText.text"); // NOI18N

			lblOutputFile.Text = bundle.getString("LogGUI.lblOutputFile.text"); // NOI18N

			logoutpath.Text = "log"; // NOI18N

			lblMaxFileSize.Text = bundle.getString("LogGUI.lblMaxFileSize.text"); // NOI18N

			maxSizeSpinner.Model = new javax.swing.SpinnerNumberModel(0, 0, 100000, 1);
			maxSizeSpinner.Enabled = splitFilesBox.Selected;

			splitFilesBox.Text = bundle.getString("LogGUI.splitFilesBox.text"); // NOI18N
			splitFilesBox.addActionListener(new ActionListenerAnonymousInnerClass4(this));

			javax.swing.GroupLayout LoggerSettingsPanelLayout = new javax.swing.GroupLayout(LoggerSettingsPanel);
			LoggerSettingsPanel.Layout = LoggerSettingsPanelLayout;
			LoggerSettingsPanelLayout.HorizontalGroup = LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerSettingsPanelLayout.createSequentialGroup().addContainerGap().addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE).addGap(18, 18, 18).addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(outputToText, javax.swing.GroupLayout.DEFAULT_SIZE, 369, short.MaxValue).addComponent(outputToHTML, javax.swing.GroupLayout.DEFAULT_SIZE, 369, short.MaxValue).addGroup(LoggerSettingsPanelLayout.createSequentialGroup().addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lblOutputFile).addComponent(lblMaxFileSize).addComponent(lblSettingsPath)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerSettingsPanelLayout.createSequentialGroup().addComponent(xmlpath).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(fileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(LoggerSettingsPanelLayout.createSequentialGroup().addComponent(maxSizeSpinner).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(splitFilesBox)).addComponent(logoutpath)))).addContainerGap());
			LoggerSettingsPanelLayout.VerticalGroup = LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoggerSettingsPanelLayout.createSequentialGroup().addContainerGap().addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(javax.swing.GroupLayout.Alignment.LEADING, LoggerSettingsPanelLayout.createSequentialGroup().addComponent(outputToHTML).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(outputToText).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblOutputFile).addComponent(logoutpath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18, 18, 18).addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblMaxFileSize).addComponent(splitFilesBox).addComponent(maxSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, short.MaxValue).addGroup(LoggerSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblSettingsPath).addComponent(xmlpath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(fileButton))).addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)).addContainerGap());

			jTabbedPane1.addTab(bundle.getString("LogGUI.LoggerSettingsPanel.TabConstraints.tabTitle"), LoggerSettingsPanel); // NOI18N

			LoggerAdvancedPanel.Enabled = rbCustom.Selected;

			buttonGroup1.add(rbGeneralDebug);
			rbGeneralDebug.Selected = true;
			rbGeneralDebug.Text = bundle.getString("LogGUI.rbGeneralDebug.text"); // NOI18N
			rbGeneralDebug.addActionListener(new ActionListenerAnonymousInnerClass5(this));

			buttonGroup1.add(rbCPUDebug);
			rbCPUDebug.Text = bundle.getString("LogGUI.rbCPUDebug.text"); // NOI18N
			rbCPUDebug.addActionListener(new ActionListenerAnonymousInnerClass6(this));

			buttonGroup1.add(rbGPUDebug);
			rbGPUDebug.Text = bundle.getString("LogGUI.rbGPUDebug.text"); // NOI18N
			rbGPUDebug.addActionListener(new ActionListenerAnonymousInnerClass7(this));

			buttonGroup1.add(rbCoreDebug);
			rbCoreDebug.Text = bundle.getString("LogGUI.rbCoreDebug.text"); // NOI18N
			rbCoreDebug.addActionListener(new ActionListenerAnonymousInnerClass8(this));

			buttonGroup1.add(rbFullDebug);
			rbFullDebug.Text = bundle.getString("LogGUI.rbFullDebug.text"); // NOI18N
			rbFullDebug.addActionListener(new ActionListenerAnonymousInnerClass9(this));

			buttonGroup1.add(rbCustom);
			rbCustom.Text = bundle.getString("LogGUI.rbCustom.text"); // NOI18N
			rbCustom.addActionListener(new ActionListenerAnonymousInnerClass10(this));

			lblLogMethod.Text = bundle.getString("LogGUI.lblLogMethod.text"); // NOI18N

			interruptMgrBox.Text = "InterruptManager"; // NOI18N
			interruptMgrBox.Enabled = rbCustom.Selected;

			ioFileMgrBox.Text = "IoFileMgrForUser"; // NOI18N
			ioFileMgrBox.Enabled = rbCustom.Selected;

			kernelLibBox.Text = "Kernel_Library"; // NOI18N
			kernelLibBox.Enabled = rbCustom.Selected;

			loadCoreBox.Text = "LoadCoreForKernel"; // NOI18N
			loadCoreBox.Enabled = rbCustom.Selected;

			loadExecBox.Text = "LoadExecForUser"; // NOI18N
			loadExecBox.Enabled = rbCustom.Selected;

			moduleMgrBox.Text = "ModuleMgrForUser"; // NOI18N
			moduleMgrBox.Enabled = rbCustom.Selected;

			stdioBox.Text = "StdioForUser"; // NOI18N
			stdioBox.Enabled = rbCustom.Selected;

			sysMemKernelBox.Text = "SysMemForKernel"; // NOI18N
			sysMemKernelBox.Enabled = rbCustom.Selected;

			sysMemUserBox.Text = "SysMemUserForUser"; // NOI18N
			sysMemUserBox.Enabled = rbCustom.Selected;

			threadManBox.Text = "ThreadManForUser"; // NOI18N
			threadManBox.Enabled = rbCustom.Selected;

			utilsBox.Text = "UtilsForUser"; // NOI18N
			utilsBox.Enabled = rbCustom.Selected;

			atracBox.Text = "sceAtrac3plus"; // NOI18N
			atracBox.Enabled = rbCustom.Selected;

			audioBox.Text = "sceAudio"; // NOI18N
			audioBox.Enabled = rbCustom.Selected;

			ctrlBox.Text = "sceCtrl"; // NOI18N
			ctrlBox.Enabled = rbCustom.Selected;

			defltBox.Text = "sceDeflt"; // NOI18N
			defltBox.Enabled = rbCustom.Selected;

			displayBox.Text = "sceDisplay"; // NOI18N
			displayBox.Enabled = rbCustom.Selected;

			dmacBox.Text = "sceDmac"; // NOI18N
			dmacBox.Enabled = rbCustom.Selected;

			fontBox.Text = "sceFont"; // NOI18N
			fontBox.Enabled = rbCustom.Selected;

			geUserBox.Text = "sceGe_user"; // NOI18N
			geUserBox.Enabled = rbCustom.Selected;

			hprmBox.Text = "sceHprm"; // NOI18N
			hprmBox.Enabled = rbCustom.Selected;

			imposeBox.Text = "sceImpose"; // NOI18N
			imposeBox.Enabled = rbCustom.Selected;

			mp3Box.Text = "sceMp3"; // NOI18N
			mp3Box.Enabled = rbCustom.Selected;

			mpegBox.Text = "sceMpeg"; // NOI18N
			mpegBox.Enabled = rbCustom.Selected;

			powerBox.Text = "scePower"; // NOI18N
			powerBox.Enabled = rbCustom.Selected;

			psmfBox.Text = "scePsmf"; // NOI18N
			psmfBox.Enabled = rbCustom.Selected;

			psmfPlayerBox.Text = "scePsmfPlayer"; // NOI18N
			psmfPlayerBox.Enabled = rbCustom.Selected;

			rtcBox.Text = "sceRtc"; // NOI18N
			rtcBox.Enabled = rbCustom.Selected;

			sasBox.Text = "sceSasCore"; // NOI18N
			sasBox.Enabled = rbCustom.Selected;

			suspendBox.Text = "sceSuspendForUser"; // NOI18N
			suspendBox.Enabled = rbCustom.Selected;

			umdBox.Text = "sceUmdUser"; // NOI18N
			umdBox.Enabled = rbCustom.Selected;

			utilityBox.Text = "sceUtility"; // NOI18N
			utilityBox.Enabled = rbCustom.Selected;

			cpuBox.Text = "CPU"; // NOI18N
			cpuBox.Enabled = rbCustom.Selected;

			gpuBox.Text = "GPU"; // NOI18N
			gpuBox.Enabled = rbCustom.Selected;

			compilerBox.Text = "Compiler"; // NOI18N
			compilerBox.Enabled = rbCustom.Selected;

			memBox.Text = "Memory"; // NOI18N
			memBox.Enabled = rbCustom.Selected;

			emuBox.Text = "Emulator"; // NOI18N
			emuBox.Enabled = rbCustom.Selected;

			lblCustom.Text = bundle.getString("LogGUI.lblCustom.text"); // NOI18N

			loaderBox.Text = "Loader"; // NOI18N
			loaderBox.Enabled = rbCustom.Selected;

			runtimeBox.Text = "Runtime"; // NOI18N
			runtimeBox.Enabled = rbCustom.Selected;

			stdoutBox.Text = "STDOUT"; // NOI18N
			stdoutBox.Enabled = rbCustom.Selected;

			stderrBox.Text = "STDERR"; // NOI18N
			stderrBox.Enabled = rbCustom.Selected;

			javax.swing.GroupLayout LoggerAdvancedPanelLayout = new javax.swing.GroupLayout(LoggerAdvancedPanel);
			LoggerAdvancedPanel.Layout = LoggerAdvancedPanelLayout;
			LoggerAdvancedPanelLayout.HorizontalGroup = LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoggerAdvancedPanelLayout.createSequentialGroup().addContainerGap().addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(rbCoreDebug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(rbFullDebug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(rbCustom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(rbGPUDebug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(lblLogMethod, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(rbCPUDebug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(rbGeneralDebug, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addComponent(stdoutBox).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(stderrBox)).addComponent(jSeparator2).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(loadExecBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(sysMemKernelBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(dmacBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(audioBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(imposeBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(psmfBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(suspendBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addComponent(interruptMgrBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(ioFileMgrBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(moduleMgrBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(sysMemUserBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(ctrlBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(fontBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(mp3Box, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(psmfPlayerBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(umdBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(geUserBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(defltBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(threadManBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(kernelLibBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(utilsBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(mpegBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(rtcBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(sasBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(powerBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(hprmBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(displayBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(atracBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(loadCoreBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(stdioBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue))).addComponent(utilityBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue))).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addComponent(cpuBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(gpuBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(loaderBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(runtimeBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(compilerBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(memBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(emuBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue)).addComponent(lblCustom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)).addContainerGap());
			LoggerAdvancedPanelLayout.VerticalGroup = LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addContainerGap().addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblCustom).addComponent(lblLogMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(cpuBox).addComponent(emuBox).addComponent(memBox).addComponent(compilerBox).addComponent(runtimeBox).addComponent(loaderBox).addComponent(gpuBox)).addGap(5, 5, 5).addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(kernelLibBox).addComponent(loadCoreBox))).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(interruptMgrBox).addComponent(ioFileMgrBox))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(moduleMgrBox).addComponent(threadManBox).addComponent(stdioBox).addComponent(loadExecBox)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(sysMemUserBox).addComponent(utilsBox).addComponent(atracBox).addComponent(sysMemKernelBox)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(displayBox).addComponent(ctrlBox).addComponent(defltBox).addComponent(audioBox)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(fontBox).addComponent(geUserBox).addComponent(hprmBox).addComponent(dmacBox)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(imposeBox).addComponent(mp3Box).addComponent(mpegBox).addComponent(powerBox)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(psmfBox).addComponent(psmfPlayerBox).addComponent(rtcBox).addComponent(sasBox)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(suspendBox).addComponent(umdBox)).addComponent(utilityBox))).addGroup(LoggerAdvancedPanelLayout.createSequentialGroup().addGap(25, 25, 25).addComponent(rbGeneralDebug).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(rbCPUDebug).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(rbGPUDebug).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(rbCoreDebug).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(rbFullDebug).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(rbCustom))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(LoggerAdvancedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(stdoutBox).addComponent(stderrBox)).addContainerGap(36, short.MaxValue));

			jTabbedPane1.addTab(bundle.getString("LogGUI.LoggerAdvancedPanel.TabConstraints.tabTitle"), LoggerAdvancedPanel); // NOI18N

			saveButton.Text = bundle.getString("LogGUI.saveButton.text"); // NOI18N
			saveButton.addActionListener(new ActionListenerAnonymousInnerClass11(this));

			jButtonCancel.Text = bundle.getString("CancelButton.text"); // NOI18N
			jButtonCancel.Parent = this;

			javax.swing.GroupLayout layout = new javax.swing.GroupLayout(ContentPane);
			ContentPane.Layout = layout;
			layout.HorizontalGroup = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jTabbedPane1).addGroup(layout.createSequentialGroup().addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addComponent(jButtonOK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButtonCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, short.MaxValue))).addContainerGap());
			layout.VerticalGroup = layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addComponent(jTabbedPane1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonOK).addComponent(saveButton).addComponent(jButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap());

			pack();
		} // </editor-fold>//GEN-END:initComponents

		private class ActionListenerAnonymousInnerClass : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.jButtonOKActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass2 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass2(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.logByKeywordCheckActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass3 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass3(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.fileButtonActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass4 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass4(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.splitFilesBoxActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass5 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass5(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.rbGeneralDebugActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass6 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass6(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.rbCPUDebugActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass7 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass7(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.rbGPUDebugActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass8 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass8(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.rbCoreDebugActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass9 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass9(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.rbFullDebugActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass10 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass10(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.rbCustomActionPerformed(evt);
			}
		}

		private class ActionListenerAnonymousInnerClass11 : java.awt.@event.ActionListener
		{
			private readonly LogGUI outerInstance;

			public ActionListenerAnonymousInnerClass11(LogGUI outerInstance)
			{
				this.outerInstance = outerInstance;
			}

			public void actionPerformed(java.awt.@event.ActionEvent evt)
			{
				outerInstance.saveButtonActionPerformed(evt);
			}
		}

		public void RefreshWindow()
		{
			openLogWindowCheck.Selected = Settings.Instance.readBool("gui.openLogwindow");
			snapSystem.ConsoleCheck.Selected = Settings.Instance.readBool("gui.snapLogwindow");

			string keyword = Settings.Instance.readString("log.keyword");
			if (!keyword.Equals("LOG_ALL"))
			{
				logKeywordField.Text = keyword;
				logByKeywordCheck.Selected = true;
			}
			else
			{
				logKeywordField.Text = "LOG_ALL";
				logByKeywordCheck.Selected = false;
			}
		}

		private bool Custom
		{
			set
			{
				interruptMgrBox.Enabled = value;
				ioFileMgrBox.Enabled = value;
				kernelLibBox.Enabled = value;
				loadCoreBox.Enabled = value;
				loadExecBox.Enabled = value;
				moduleMgrBox.Enabled = value;
				stdioBox.Enabled = value;
				sysMemKernelBox.Enabled = value;
				sysMemUserBox.Enabled = value;
				threadManBox.Enabled = value;
				utilsBox.Enabled = value;
				atracBox.Enabled = value;
				audioBox.Enabled = value;
				ctrlBox.Enabled = value;
				defltBox.Enabled = value;
				displayBox.Enabled = value;
				dmacBox.Enabled = value;
				fontBox.Enabled = value;
				geUserBox.Enabled = value;
				hprmBox.Enabled = value;
				imposeBox.Enabled = value;
				mp3Box.Enabled = value;
				mpegBox.Enabled = value;
				powerBox.Enabled = value;
				psmfBox.Enabled = value;
				psmfPlayerBox.Enabled = value;
				rtcBox.Enabled = value;
				sasBox.Enabled = value;
				suspendBox.Enabled = value;
				umdBox.Enabled = value;
				utilityBox.Enabled = value;
				cpuBox.Enabled = value;
				gpuBox.Enabled = value;
				compilerBox.Enabled = value;
				memBox.Enabled = value;
				emuBox.Enabled = value;
				loaderBox.Enabled = value;
				runtimeBox.Enabled = value;
				stdoutBox.Enabled = value;
				stderrBox.Enabled = value;
			}
		}

		private string selectLoggers()
		{
			string loggers = "";
			if (rbGeneralDebug.Selected)
			{
				loggers += LB + "<logger name='cpu' />" + LB + "<logger name='hle' />" + LB + "<logger name='memory' />" + LB + "<logger name='ge' />" + LB + "<logger name='emu' />" + LB + "<logger name='compiler' > <level value='off' /> </logger>" + LB + "<logger name='runtime' > <level value='off' /> </logger>" + LB + "<logger name='loader' > <level value='off' /> </logger>" + LB + "<logger name='stdout' />" + LB + "<logger name='stderr' />" + LB + "<!-- Output profiler info to 'profiler.txt' -->" + LB + "<logger name='profiler' additivity='false'>" + LB + "<level value='info' />" + LB + "<appender-ref ref='ProfilerTxtAppender' />" + LB + "</logger>" + LB;
			}
			else if (rbCPUDebug.Selected)
			{
				loggers += LB + "<logger name='cpu' />" + LB + "<logger name='hle' > <level value='off' /> </logger>" + LB + "<logger name='memory' > <level value='off' /> </logger>" + LB + "<logger name='ge' > <level value='off' /> </logger>" + LB + "<logger name='emu' > <level value='off' /> </logger>" + LB + "<logger name='compiler' />" + LB + "<logger name='runtime' > <level value='off' /> </logger>" + LB + "<logger name='loader' > <level value='off' /> </logger>" + LB + "<logger name='stdout' />" + LB + "<logger name='stderr' />" + LB + "<!-- Output profiler info to 'profiler.txt' -->" + LB + "<logger name='profiler' additivity='false'>" + LB + "<level value='info' />" + LB + "<appender-ref ref='ProfilerTxtAppender' />" + LB + "</logger>" + LB;
			}
			else if (rbGPUDebug.Selected)
			{
				loggers += LB + "<logger name='cpu' > <level value='off' /> </logger>" + LB + "<logger name='hle' > <level value='off' /> </logger>" + LB + "<logger name='memory' > <level value='off' /> </logger>" + LB + "<logger name='ge' />" + LB + "<logger name='emu' > <level value='off' /> </logger>" + LB + "<logger name='compiler' > <level value='off' /> </logger>" + LB + "<logger name='runtime' > <level value='off' /> </logger>" + LB + "<logger name='loader' > <level value='off' /> </logger>" + LB + "<logger name='stdout' />" + LB + "<logger name='stderr' />" + LB + "<!-- Output profiler info to 'profiler.txt' -->" + LB + "<logger name='profiler' additivity='false'>" + LB + "<level value='info' />" + LB + "<appender-ref ref='ProfilerTxtAppender' />" + LB + "</logger>" + LB;
			}
			else if (rbCoreDebug.Selected)
			{
				loggers += LB + "<logger name='cpu' > <level value='off' /> </logger>" + LB + "<logger name='hle' > <level value='off' /> </logger>" + LB + "<logger name='memory' > <level value='off' /> </logger>" + LB + "<logger name='ge' > <level value='off' /> </logger>" + LB + "<logger name='emu' />" + LB + "<logger name='compiler' />" + LB + "<logger name='runtime' />" + LB + "<logger name='loader' />" + LB + "<logger name='stdout' > <level value='off' /> </logger>" + LB + "<logger name='stderr' > <level value='off' /> </logger>" + LB + "<!-- Output profiler info to 'profiler.txt' -->" + LB + "<logger name='profiler' additivity='false'>" + LB + "<level value='info' />" + LB + "<appender-ref ref='ProfilerTxtAppender' />" + LB + "</logger>" + LB;
			}
			else if (rbFullDebug.Selected)
			{
				loggers += LB + "<logger name='cpu' />" + LB + "<logger name='hle' />" + LB + "<logger name='memory' />" + LB + "<logger name='ge' />" + LB + "<logger name='emu' />" + LB + "<logger name='compiler' />" + LB + "<logger name='runtime' />" + LB + "<logger name='loader' />" + LB + "<logger name='stdout' />" + LB + "<logger name='stderr' />" + LB + "<!-- Output profiler info to 'profiler.txt' -->" + LB + "<logger name='profiler' additivity='false'>" + LB + "<level value='info' />" + LB + "<appender-ref ref='ProfilerTxtAppender' />" + LB + "</logger>" + LB;
			}
			else if (rbCustom.Selected)
			{
				if (interruptMgrBox.Selected)
				{
					loggers += LB + "<logger name='hle.InterruptManager' />" + LB;
				}
				else
				{
					loggers += LB + "<logger name='hle.InterruptManager' > <level value='off' /> </logger>" + LB;
				}
				if (ioFileMgrBox.Selected)
				{
					loggers += "<logger name='hle.IoFileMgrForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.IoFileMgrForUser' > <level value='off' /> </logger>" + LB;
				}
				if (kernelLibBox.Selected)
				{
					loggers += "<logger name='hle.Kernel_Library' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.Kernel_Library' > <level value='off' /> </logger>" + LB;
				}
				if (loadCoreBox.Selected)
				{
					loggers += "<logger name='hle.LoadCoreForKernel' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.LoadCoreForKernel' > <level value='off' /> </logger>" + LB;
				}
				if (loadExecBox.Selected)
				{
					loggers += "<logger name='hle.LoadExecForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.LoadExecForUser' > <level value='off' /> </logger>" + LB;
				}
				if (moduleMgrBox.Selected)
				{
					loggers += "<logger name='hle.ModuleMgrForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.ModuleMgrForUser' > <level value='off' /> </logger>" + LB;
				}
				if (stdioBox.Selected)
				{
					loggers += "<logger name='hle.StdioForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.StdioForUser' > <level value='off' /> </logger>" + LB;
				}
				if (sysMemKernelBox.Selected)
				{
					loggers += "<logger name='hle.SysMemForKernel' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.SysMemForKernel' > <level value='off' /> </logger>" + LB;
				}
				if (sysMemUserBox.Selected)
				{
					loggers += "<logger name='hle.SysMemUserForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.SysMemUserForUser' > <level value='off' /> </logger>" + LB;
				}
				if (threadManBox.Selected)
				{
					loggers += "<logger name='hle.ThreadManForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.ThreadManForUser' > <level value='off' /> </logger>" + LB;
				}
				if (utilsBox.Selected)
				{
					loggers += "<logger name='hle.UtilsForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.UtilsForUser' > <level value='off' /> </logger>" + LB;
				}
				if (atracBox.Selected)
				{
					loggers += "<logger name='hle.sceAtrac3plus' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceAtrac3plus' > <level value='off' /> </logger>" + LB;
				}
				if (audioBox.Selected)
				{
					loggers += "<logger name='hle.sceAudio' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceAudio' > <level value='off' /> </logger>" + LB;
				}
				if (ctrlBox.Selected)
				{
					loggers += "<logger name='hle.sceCtrl' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceCtrl' > <level value='off' /> </logger>" + LB;
				}
				if (defltBox.Selected)
				{
					loggers += "<logger name='hle.sceDeflt' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceDeflt' > <level value='off' /> </logger>" + LB;
				}
				if (displayBox.Selected)
				{
					loggers += "<logger name='hle.sceDisplay' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceDisplay' > <level value='off' /> </logger>" + LB;
				}
				if (dmacBox.Selected)
				{
					loggers += "<logger name='hle.sceDmac' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceDmac' > <level value='off' /> </logger>" + LB;
				}
				if (fontBox.Selected)
				{
					loggers += "<logger name='hle.sceFont' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceFont' > <level value='off' /> </logger>" + LB;
				}
				if (geUserBox.Selected)
				{
					loggers += "<logger name='hle.sceGe_user' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceGe_user' > <level value='off' /> </logger>" + LB;
				}
				if (hprmBox.Selected)
				{
					loggers += "<logger name='hle.sceHprm' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceHprm' > <level value='off' /> </logger>" + LB;
				}
				if (imposeBox.Selected)
				{
					loggers += "<logger name='hle.sceImpose' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceImpose' > <level value='off' /> </logger>" + LB;
				}
				if (mp3Box.Selected)
				{
					loggers += "<logger name='hle.sceMp3' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceMp3' > <level value='off' /> </logger>" + LB;
				}
				if (mpegBox.Selected)
				{
					loggers += "<logger name='hle.sceMpeg' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceMpeg' > <level value='off' /> </logger>" + LB;
				}
				if (powerBox.Selected)
				{
					loggers += "<logger name='hle.scePower' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.scePower' > <level value='off' /> </logger>" + LB;
				}
				if (psmfBox.Selected)
				{
					loggers += "<logger name='hle.scePsmf' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.scePsmf' > <level value='off' /> </logger>" + LB;
				}
				if (psmfPlayerBox.Selected)
				{
					loggers += "<logger name='hle.scePsmfPlayer' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.scePsmfPlayer' > <level value='off' /> </logger>" + LB;
				}
				if (rtcBox.Selected)
				{
					loggers += "<logger name='hle.sceRtc' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceRtc' > <level value='off' /> </logger>" + LB;
				}
				if (sasBox.Selected)
				{
					loggers += "<logger name='hle.sceSasCore' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceSasCore' > <level value='off' /> </logger>" + LB;
				}
				if (suspendBox.Selected)
				{
					loggers += "<logger name='hle.sceSuspendForUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceSuspendForUser' > <level value='off' /> </logger>" + LB;
				}
				if (umdBox.Selected)
				{
					loggers += "<logger name='hle.sceUmdUser' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceUmdUser' > <level value='off' /> </logger>" + LB;
				}
				if (utilityBox.Selected)
				{
					loggers += "<logger name='hle.sceUtility' />" + LB;
				}
				else
				{
					loggers += "<logger name='hle.sceUtility' > <level value='off' /> </logger>" + LB;
				}
				if (cpuBox.Selected)
				{
					loggers += "<logger name='cpu' />" + LB;
				}
				else
				{
					loggers += "<logger name='cpu' > <level value='off' /> </logger>" + LB;
				}
				if (gpuBox.Selected)
				{
					loggers += "<logger name='ge' />" + LB;
				}
				else
				{
					loggers += "<logger name='ge' > <level value='off' /> </logger>" + LB;
				}
				if (compilerBox.Selected)
				{
					loggers += "<logger name='compiler' />" + LB;
				}
				else
				{
					loggers += "<logger name='compiler' > <level value='off' /> </logger>" + LB;
				}
				if (memBox.Selected)
				{
					loggers += "<logger name='memory' />" + LB;
				}
				else
				{
					loggers += "<logger name='memory' > <level value='off' /> </logger>" + LB;
				}
				if (emuBox.Selected)
				{
					loggers += "<logger name='emu' />" + LB;
				}
				else
				{
					loggers += "<logger name='emu' > <level value='off' /> </logger>" + LB;
				}
				if (loaderBox.Selected)
				{
					loggers += "<logger name='loader' />" + LB;
				}
				else
				{
					loggers += "<logger name='loader' > <level value='off' /> </logger>" + LB;
				}
				if (runtimeBox.Selected)
				{
					loggers += "<logger name='runtime' />" + LB;
				}
				else
				{
					loggers += "<logger name='runtime' > <level value='off' /> </logger>" + LB;
				}
				if (stdoutBox.Selected)
				{
					loggers += "<logger name='stdout' />" + LB;
				}
				else
				{
					loggers += "<logger name='stdout' > <level value='off' /> </logger>" + LB;
				}
				if (stderrBox.Selected)
				{
					loggers += "<logger name='stderr' />" + LB;
				}
				else
				{
					loggers += "<logger name='stderr' > <level value='off' /> </logger>" + LB;
				}

				loggers += "<!-- Output profiler info to 'profiler.txt' -->" + LB + "<logger name='profiler' additivity='false'>" + LB + "<level value='info' />" + LB + "<appender-ref ref='ProfilerTxtAppender' />" + LB + "</logger>" + LB;
			}

			return loggers;
		}
	private void jButtonOKActionPerformed(java.awt.@event.ActionEvent evt)
	{ //GEN-FIRST:event_jButtonOKActionPerformed
			Settings.Instance.writeBool("gui.openLogwindow", openLogWindowCheck.Selected);
			Settings.Instance.writeBool("gui.snapLogwindow", snapSystem.ConsoleCheck.Selected);
			if (!logKeywordField.Text.Empty)
			{
				Settings.Instance.writeString("log.keyword", logKeywordField.Text);
			}
			else
			{
				Settings.Instance.writeString("log.keyword", "LOG_ALL");
			}

			if (snapSystem.ConsoleCheck.Selected && mainWindow != null)
			{
				mainWindow.updateSystem.ConsoleWinPosition();
			}

			dispose();
	} //GEN-LAST:event_jButtonOKActionPerformed

	private void fileButtonActionPerformed(java.awt.@event.ActionEvent evt)
	{ //GEN-FIRST:event_fileButtonActionPerformed
			JFileChooser fc = new JFileChooser();

			fc.CurrentDirectory = new File(".");
			fc.SelectedFile = new File(xmlpath.Text);

			fc.addChoosableFileFilter(Constants.fltXMLFiles);
			fc.FileFilter = Constants.fltXMLFiles;

			int result = fc.showOpenDialog(this);
			if (result == JFileChooser.APPROVE_OPTION)
			{
				xmlpath.Text = fc.SelectedFile.Path;
				setLogSettingsFile();
			}
	} //GEN-LAST:event_fileButtonActionPerformed

	private void saveButtonActionPerformed(java.awt.@event.ActionEvent evt)
	{ //GEN-FIRST:event_saveButtonActionPerformed
			try
			{
				File f = new File(LogSettingsPath);
				if (f.exists())
				{
					f.delete();
				}
				string outName = "log";
				if (!logoutpath.Text.Equals(""))
				{
					outName = logoutpath.Text;
				}

				RandomAccessFile raf = new RandomAccessFile(LogSettingsPath, "rw");

				string header = "<?xml version='1.0' encoding='UTF-8' ?>" + LB + "<!DOCTYPE log4j:configuration SYSTEM 'log4j.dtd'>" + LB + LB + "<log4j:configuration>" + LB + LB;

				string windowAppender = "<appender name='JpcspAppender' class='pspsharp.log.TextPaneAppender'>" + LB + "<layout class='org.apache.log4j.PatternLayout'>" + LB + "<param name='ConversionPattern' value='%r [%t] %-5p %c - %m%n' />" + LB + "</layout>" + LB + "</appender>" + LB;

				string htmlAppender;
				if (splitFilesBox.Selected)
				{
					htmlAppender = "<appender name='HTMLAppender' class='org.apache.log4j.RollingFileAppender'>" + LB + "<param name='MaxFileSize' value='" + maxSizeSpinner.Value + "KB' />" + LB + "<param name='MaxBackupIndex' value='500' />" + LB + "<param name='File' value='" + outName + ".html' />" + LB + "<param name='Append' value='false' />" + LB + "<layout class='pspsharp.log.HTMLLayout'>" + LB + "<param name='Title' value='pspsharp log file' />" + LB + "</layout>" + LB + "</appender>" + LB;
				}
				else
				{
					htmlAppender = "<appender name='HTMLAppender' class='org.apache.log4j.FileAppender'>" + LB + "<param name='File' value='" + outName + ".html' />" + LB + "<param name='Append' value='false' />" + LB + "<layout class='pspsharp.log.HTMLLayout'>" + LB + "<param name='Title' value='pspsharp log file' />" + LB + "</layout>" + LB + "</appender>" + LB;
				}

				string textAppender;
				if (splitFilesBox.Selected)
				{
					textAppender = "<appender name='TxtAppender' class='org.apache.log4j.RollingFileAppender'>" + LB + "<param name='MaxFileSize' value='" + maxSizeSpinner.Value + "KB' />" + LB + "<param name='MaxBackupIndex' value='500' />" + LB + "<param name='File' value='" + outName + ".txt' />" + LB + "<param name='Append' value='false' />" + LB + "<layout class='org.apache.log4j.PatternLayout'>" + LB + "<param name='ConversionPattern' value='%5p %8c - %t - %m%n' />" + LB + "</layout>" + LB + "</appender>" + LB;
				}
				else
				{
					textAppender = "<appender name='TxtAppender' class='org.apache.log4j.FileAppender'>" + LB + "<param name='File' value='" + outName + ".txt' />" + LB + "<param name='Append' value='false' />" + LB + "<layout class='org.apache.log4j.PatternLayout'>" + LB + "<param name='ConversionPattern' value='%5p %8c - %t - %m%n' />" + LB + "</layout>" + LB + "</appender>" + LB;
				}

				string profilerAppender = "<appender name='ProfilerTxtAppender' class='org.apache.log4j.FileAppender'>" + LB + "<param name='File' value='profiler.txt' />" + LB + "<param name='Append' value='false' />" + LB + "<layout class='org.apache.log4j.PatternLayout'>" + LB + "<param name='ConversionPattern' value='%m%n' />" + LB + "</layout>" + LB + "</appender>" + LB;

				string loggers = selectLoggers();

				string rootStart = LB + "<root>" + LB + "<level value ='off' />" + LB;
				string rootWindowAppender = "<appender-ref ref='JpcspAppender' />" + LB;
				string rootHtmlAppender = "<appender-ref ref='HTMLAppender' />" + LB;
				string rootTextAppender = "<appender-ref ref='TxtAppender' />" + LB;

				string rootEnd = "</root>" + LB + LB + "</log4j:configuration>" + LB;

				string contents = header + windowAppender;
				if (outputToHTML.Selected)
				{
					contents += htmlAppender;
				}
				if (outputToText.Selected)
				{
					contents += textAppender;
				}
				contents += profilerAppender;
				contents += loggers;
				contents += rootStart;
				contents += rootWindowAppender;
				if (outputToHTML.Selected)
				{
					contents += rootHtmlAppender;
				}
				if (outputToText.Selected)
				{
					contents += rootTextAppender;
				}
				contents += rootEnd;

				raf.writeBytes(contents);
				raf.close();
			}
			catch (Exception)
			{
				// Ignore.
			}
			settingsArea.setText("");
			setLogSettingsFile();
	} //GEN-LAST:event_saveButtonActionPerformed

	private void splitFilesBoxActionPerformed(java.awt.@event.ActionEvent evt)
	{ //GEN-FIRST:event_splitFilesBoxActionPerformed
			maxSizeSpinner.Enabled = splitFilesBox.Selected;
	} //GEN-LAST:event_splitFilesBoxActionPerformed

		private void rbCustomActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_rbCustomActionPerformed
			Custom = true;
		} //GEN-LAST:event_rbCustomActionPerformed

		private void rbFullDebugActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_rbFullDebugActionPerformed
			Custom = false;
		} //GEN-LAST:event_rbFullDebugActionPerformed

		private void rbCoreDebugActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_rbCoreDebugActionPerformed
			Custom = false;
		} //GEN-LAST:event_rbCoreDebugActionPerformed

		private void rbGPUDebugActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_rbGPUDebugActionPerformed
			Custom = false;
		} //GEN-LAST:event_rbGPUDebugActionPerformed

		private void rbCPUDebugActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_rbCPUDebugActionPerformed
			Custom = false;
		} //GEN-LAST:event_rbCPUDebugActionPerformed

		private void rbGeneralDebugActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_rbGeneralDebugActionPerformed
			Custom = false;
		} //GEN-LAST:event_rbGeneralDebugActionPerformed

		private void logByKeywordCheckActionPerformed(java.awt.@event.ActionEvent evt)
		{ //GEN-FIRST:event_logByKeywordCheckActionPerformed
			if (logByKeywordCheck.Selected)
			{
				logKeywordField.Editable = true;
			}
			else
			{
				logKeywordField.Text = "LOG_ALL";
				logKeywordField.Editable = false;
			}
		} //GEN-LAST:event_logByKeywordCheckActionPerformed

		public override void dispose()
		{
			Emulator.MainGUI.endWindowDialog();
			base.dispose();
		}
		// Variables declaration - do not modify//GEN-BEGIN:variables
		private javax.swing.JPanel LoggerAdvancedPanel;
		private javax.swing.JPanel LoggerGeneralPanel;
		private javax.swing.JPanel LoggerSettingsPanel;
		private javax.swing.JCheckBox atracBox;
		private javax.swing.JCheckBox audioBox;
		private javax.swing.ButtonGroup buttonGroup1;
		private javax.swing.JCheckBox compilerBox;
		private javax.swing.JCheckBox cpuBox;
		private javax.swing.JCheckBox ctrlBox;
		private javax.swing.JCheckBox defltBox;
		private javax.swing.JCheckBox displayBox;
		private javax.swing.JCheckBox dmacBox;
		private javax.swing.JCheckBox emuBox;
		private javax.swing.JButton fileButton;
		private javax.swing.JCheckBox fontBox;
		private javax.swing.JCheckBox geUserBox;
		private javax.swing.JCheckBox gpuBox;
		private javax.swing.JCheckBox hprmBox;
		private javax.swing.JCheckBox imposeBox;
		private javax.swing.JCheckBox interruptMgrBox;
		private javax.swing.JCheckBox ioFileMgrBox;
		private pspsharp.GUI.CancelButton jButtonCancel;
		private javax.swing.JButton jButtonOK;
		private javax.swing.JScrollPane jScrollPane1;
		private javax.swing.JSeparator jSeparator1;
		private javax.swing.JSeparator jSeparator2;
		private javax.swing.JTabbedPane jTabbedPane1;
		private javax.swing.JCheckBox kernelLibBox;
		private javax.swing.JLabel lblCustom;
		private javax.swing.JLabel lblLogMethod;
		private javax.swing.JLabel lblMaxFileSize;
		private javax.swing.JLabel lblOutputFile;
		private javax.swing.JLabel lblSettingsPath;
		private javax.swing.JCheckBox loadCoreBox;
		private javax.swing.JCheckBox loadExecBox;
		private javax.swing.JCheckBox loaderBox;
		private javax.swing.JCheckBox logByKeywordCheck;
		private javax.swing.JTextField logKeywordField;
		private javax.swing.JTextField logoutpath;
		private javax.swing.JSpinner maxSizeSpinner;
		private javax.swing.JCheckBox memBox;
		private javax.swing.JCheckBox moduleMgrBox;
		private javax.swing.JCheckBox mp3Box;
		private javax.swing.JCheckBox mpegBox;
		private javax.swing.JCheckBox openLogWindowCheck;
		private javax.swing.JCheckBox outputToHTML;
		private javax.swing.JCheckBox outputToText;
		private javax.swing.JCheckBox powerBox;
		private javax.swing.JCheckBox psmfBox;
		private javax.swing.JCheckBox psmfPlayerBox;
		private javax.swing.JRadioButton rbCPUDebug;
		private javax.swing.JRadioButton rbCoreDebug;
		private javax.swing.JRadioButton rbCustom;
		private javax.swing.JRadioButton rbFullDebug;
		private javax.swing.JRadioButton rbGPUDebug;
		private javax.swing.JRadioButton rbGeneralDebug;
		private javax.swing.JCheckBox rtcBox;
		private javax.swing.JCheckBox runtimeBox;
		private javax.swing.JCheckBox sasBox;
		private javax.swing.JButton saveButton;
		private javax.swing.JTextArea settingsArea;
		private javax.swing.JCheckBox snapSystem.ConsoleCheck;
		private javax.swing.JCheckBox splitFilesBox;
		private javax.swing.JCheckBox stderrBox;
		private javax.swing.JCheckBox stdioBox;
		private javax.swing.JCheckBox stdoutBox;
		private javax.swing.JCheckBox suspendBox;
		private javax.swing.JCheckBox sysMemKernelBox;
		private javax.swing.JCheckBox sysMemUserBox;
		private javax.swing.JCheckBox threadManBox;
		private javax.swing.JCheckBox umdBox;
		private javax.swing.JCheckBox utilityBox;
		private javax.swing.JCheckBox utilsBox;
		private javax.swing.JTextField xmlpath;
		// End of variables declaration//GEN-END:variables
	}

}